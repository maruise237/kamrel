const { createClient } = require('@supabase/supabase-js')

// Configuration Supabase
const SUPABASE_URL = 'https://qyrrwjneeolzcayqdsur.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF5cnJ3am5lZW9semNheXFkc3VyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDA4NDAsImV4cCI6MjA3NDQxNjg0MH0.fJNzKlTO5agqCHb1AC9QqOxp28qARzsSs3822e9w7GU';

console.log('üöÄ Test des fonctions Edge et des tables apr√®s d√©ploiement...\n');

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

async function testEdgeFunctions() {
  console.log('üîç Test des fonctions Edge pour les invitations...\n')

  try {
    // Test 1: V√©rifier si les fonctions Edge existent
    console.log('1. Test de la fonction send-invite...')
    
    const { data: sendInviteData, error: sendInviteError } = await supabase.functions.invoke('send-invite', {
      body: {
        email: 'test@example.com',
        role: 'member'
      }
    })

    if (sendInviteError) {
      console.log('‚ùå Erreur send-invite:', sendInviteError.message)
    } else {
      console.log('‚úÖ Fonction send-invite accessible')
      console.log('   R√©ponse:', sendInviteData)
    }

    console.log('\n2. Test de la fonction accept-invite...')
    
    const { data: acceptInviteData, error: acceptInviteError } = await supabase.functions.invoke('accept-invite', {
      body: {
        token: 'test-token'
      }
    })

    if (acceptInviteError) {
      console.log('‚ùå Erreur accept-invite:', acceptInviteError.message)
    } else {
      console.log('‚úÖ Fonction accept-invite accessible')
      console.log('   R√©ponse:', acceptInviteData)
    }

    console.log('\n3. Test de la fonction create-default-workspace...')
    
    const { data: createWorkspaceData, error: createWorkspaceError } = await supabase.functions.invoke('create-default-workspace', {
      body: {
        invite_token: null
      }
    })

    if (createWorkspaceError) {
      console.log('‚ùå Erreur create-default-workspace:', createWorkspaceError.message)
    } else {
      console.log('‚úÖ Fonction create-default-workspace accessible')
      console.log('   R√©ponse:', createWorkspaceData)
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message)
  }

  // Test 2: V√©rifier les tables n√©cessaires
  console.log('\n4. V√©rification des tables n√©cessaires...')
  
  try {
    const { data: workspaces, error: workspacesError } = await supabase
      .from('workspaces')
      .select('*')
      .limit(1)

    if (workspacesError) {
      console.log('‚ùå Table workspaces:', workspacesError.message)
    } else {
      console.log('‚úÖ Table workspaces accessible')
    }

    const { data: invites, error: invitesError } = await supabase
      .from('invites')
      .select('*')
      .limit(1)

    if (invitesError) {
      console.log('‚ùå Table invites:', invitesError.message)
    } else {
      console.log('‚úÖ Table invites accessible')
    }

    const { data: members, error: membersError } = await supabase
      .from('workspace_members')
      .select('*')
      .limit(1)

    if (membersError) {
      console.log('‚ùå Table workspace_members:', membersError.message)
    } else {
      console.log('‚úÖ Table workspace_members accessible')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des tables:', error.message)
  }

  console.log('\nüìã R√©sum√© du diagnostic:')
  console.log('- Les fonctions Edge peuvent ne pas √™tre d√©ploy√©es sur Supabase')
  console.log('- V√©rifiez le d√©ploiement des fonctions dans le dashboard Supabase')
  console.log('- Les tables semblent accessibles mais peuvent manquer de donn√©es de test')
}

testEdgeFunctions()