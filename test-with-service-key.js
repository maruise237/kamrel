const fs = require('fs');
const { createClient } = require('@supabase/supabase-js');

console.log('üîß Test avec cl√© de service Supabase...');
console.log('üí° Cette cl√© a g√©n√©ralement plus de permissions que la cl√© anonyme');

// Demander √† l'utilisateur d'entrer sa cl√© de service
console.log('\nüìù Pour ce test, vous aurez besoin de votre cl√© de service Supabase:');
console.log('1. Allez sur https://app.supabase.com');
console.log('2. S√©lectionnez votre projet');
console.log('3. Allez dans Settings > API');
console.log('4. Copiez la "service_role" key (attention: cette cl√© est sensible!)');
console.log('5. Collez-la ci-dessous quand vous y √™tes invit√©');

// Fonction pour lire l'entr√©e utilisateur (simplifi√©e)
function askForServiceKey() {
    return new Promise((resolve) => {
        const readline = require('readline').createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        readline.question('\nüîë Entrez votre cl√© de service Supabase: ', (key) => {
            readline.close();
            resolve(key.trim());
        });
    });
}

async function testWithServiceKey() {
    try {
        const serviceKey = await askForServiceKey();
        
        if (!serviceKey) {
            console.log('‚ùå Aucune cl√© fournie. Test annul√©.');
            return;
        }
        
        // Lire l'URL depuis .env.local
        const envContent = fs.readFileSync('.env.local', 'utf8');
        const envVars = {};
        
        envContent.split('\n').forEach(line => {
            const match = line.match(/^([^=#]+)=([^#]*)/);
            if (match) {
                envVars[match[1].trim()] = match[2].trim();
            }
        });
        
        const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL;
        
        if (!supabaseUrl) {
            console.error('‚ùå URL Supabase non trouv√©e dans .env.local');
            return;
        }
        
        console.log('\nüîó Connexion avec cl√© de service...');
        const supabase = createClient(supabaseUrl, serviceKey);
        
        // Test simple
        console.log('üîß Test d\'acc√®s √† la base de donn√©es...');
        const { data, error } = await supabase
            .from('teams')
            .select('count')
            .limit(1);
        
        if (error) {
            console.error('‚ùå Erreur avec cl√© de service:', error.message);
            console.log('üí° Cela sugg√®re que:');
            console.log('   - Les tables n\'existent pas du tout');
            console.log('   - La migration SQL n\'a pas √©t√© ex√©cut√©e');
            console.log('   - Il y a un probl√®me de configuration Supabase');
        } else {
            console.log('‚úÖ Succ√®s avec cl√© de service!');
            console.log('üí° Les tables existent mais les politiques RLS bloquent l\'acc√®s anonyme');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error.message);
    }
}

// M√©thode alternative sans readline (pour PowerShell)
console.log('\nüìã Alternative: Ajoutez cette ligne √† votre .env.local:');
console.log('SUPABASE_SERVICE_KEY=votre_cl√©_de_service_ici');
console.log('Puis relancez le test');

testWithServiceKey();